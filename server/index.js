const express = require('express');
const { google } = require('googleapis');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
require('dotenv').config();

const app = express();
app.use(express.json());

const corsOrigin = process.env.CORS_ORIGIN || 'http://localhost:3000';
const spreadsheetId = process.env.SPREADSHEET_ID;
const keyFilePath = process.env.KEY_FILE_PATH;
const port = process.env.SERVER_PORT || 3001;

if (!spreadsheetId || !keyFilePath || !process.env.OPENROUTER_API_KEY) {
  console.error('‚ùå –£–±–µ–¥–∏—Å—å, —á—Ç–æ .env —Å–æ–¥–µ—Ä–∂–∏—Ç SPREADSHEET_ID, KEY_FILE_PATH –∏ OPENROUTER_API_KEY');
  process.exit(1);
}

app.use(cors({ origin: corsOrigin }));

const auth = new google.auth.GoogleAuth({
  keyFile: path.resolve(__dirname, keyFilePath),
  scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
});

const categories = [
  'processor', 'graphicsCard', 'ram', 'storage',
  'motherboard', 'case', 'cooler', 'monitor',
  'powerSupply', 'keyboard', 'mouse', 'operatingSystem',
];

const parseNumber = val => {
  const num = parseFloat(val);
  return isNaN(num) ? 0 : num;
};

const componentSchema = {
  processor: row => {
    const item = {
      name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
      socket: row[3] || '', power: parseNumber(row[4]),
      frequency: parseNumber(row[5]), cores: parseNumber(row[6])
    };
    item.score = item.frequency * 10 + item.cores;
    return item;
  },
  graphicsCard: row => {
    const item = {
      name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
      power: parseNumber(row[3]), memory: parseNumber(row[4]), pcieVersion: row[5] || ''
    };
    item.score = item.memory * 10;
    return item;
  },
  ram: row => {
    const item = {
      name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
      ramType: row[3] || '', frequency: parseNumber(row[4]), capacity: parseNumber(row[5])
    };
    item.score = item.frequency / 100 + item.capacity;
    return item;
  },
  storage: row => ({
    name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
    interface: row[3] || '', score: 1
  }),
  motherboard: row => ({
    name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
    socket: row[3] || '', formFactor: row[4] || '', ramType: row[5] || '',
    supportedInterfaces: row[6] || '', pcieVersion: row[7] || '', score: 1
  }),
  case: row => ({
    name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
    supportedFormFactors: row[3] || '', score: 1
  }),
  cooler: row => ({
    name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
    socket: row[3] || '', score: 1
  }),
  monitor: row => ({
    name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
    resolution: row[3] || '', score: 1
  }),
  powerSupply: row => ({
    name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
    wattage: parseNumber(row[3]), score: 1
  }),
  keyboard: row => ({
    name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
    type: row[3] || '', score: 1
  }),
  mouse: row => ({
    name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
    type: row[3] || '', score: 1
  }),
  operatingSystem: row => ({
    name: row[0] || '', price: parseNumber(row[1]), description: row[2] || '',
    version: row[3] || '', score: 1
  }),
};

const COMPONENTS_FILE = path.join(__dirname, 'components.json');

async function loadComponentsAndSaveToFile() {
  try {
    const authClient = await auth.getClient();
    const sheetsApi = google.sheets({ version: 'v4', auth: authClient });

    const components = [];

    for (const category of categories) {
      const range = `${category}!A2:Z`;
      const response = await sheetsApi.spreadsheets.values.get({ spreadsheetId, range });
      const rows = response.data.values || [];
      const parser = componentSchema[category];

      for (const row of rows) {
        try {
          const component = parser(row);
          component.category = category;
          if (component.name && component.price > 0) components.push(component);
        } catch (e) {
          console.warn(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${category}:`, e.message);
        }
      }
    }

    fs.writeFileSync(COMPONENTS_FILE, JSON.stringify(components, null, 2), 'utf-8');
    console.log(`‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${COMPONENTS_FILE} (${components.length} —à—Ç)`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ Google Sheets:', err.message);
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(loadComponentsAndSaveToFile, 5 * 60 * 1000);

// –†—É—á–Ω–æ–π API –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
app.get('/api/components', (req, res) => {
  try {
    const data = fs.readFileSync(COMPONENTS_FILE, 'utf-8');
    const components = JSON.parse(data);
    res.json(components);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è components.json:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
  }
});

app.post('/api/ask-ai', async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ error: 'Prompt –Ω–µ —É–∫–∞–∑–∞–Ω' });

  try {
    const components = fs.readFileSync(COMPONENTS_FILE, 'utf-8');
    const componentList = JSON.parse(components);

    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'openai/gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: `
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–±–æ—Ä–∫–µ –ü–ö. –¢–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ 3 —Å–±–æ—Ä–∫–∏: –±—é–¥–∂–µ—Ç–Ω–∞—è, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
- –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –ø–æ socket.
- –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –ø–æ ramType.
- –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç–æ–π –ø–æ interface –∏ supportedInterfaces.
- –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç–æ–π –ø–æ pcieVersion.
- –ö—É–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É –ø–æ socket.
- –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫–æ—Ä–ø—É—Å—É –ø–æ formFactor –∏ supportedFormFactors.
- –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø–∞—Å–æ–º –º–æ—â–Ω–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ +20%).

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ.
–ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.
–ù–µ —É–ø–æ–º–∏–Ω–∞–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É.
–í—ã–≤–µ–¥–∏ –∫–∞–∂–¥—É—é —Å–±–æ—Ä–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω–æ–π.
–ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã ‚Äî —É–∫–∞–∂–∏ —ç—Ç–æ —è–≤–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ.
`.trim()
          },
          {
            role: 'user',
            content: `–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:\n\n${JSON.stringify(componentList)}\n\n${prompt}`
          }
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    if (
  response.data &&
  Array.isArray(response.data.choices) &&
  response.data.choices[0] &&
  response.data.choices[0].message
) {
  res.json({ response: response.data.choices[0].message.content });
} else {
  console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter:', response.data);
  res.status(500).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter' });
}
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter:', err?.response?.data || err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò' });
  }
});

app.listen(port, '0.0.0.0', async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${port}`);
  await loadComponentsAndSaveToFile(); // –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
});
