import React, { useEffect, useState } from 'react';

const API_URL = 'https://pc-builder-backend-24zh.onrender.com/api/components';

const categoryTranslations = {
  processor: '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
  graphicsCard: '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞',
  ram: '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å',
  storage: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å',
  motherboard: '–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞',
  case: '–ö–æ—Ä–ø—É—Å',
  cooler: '–ö—É–ª–µ—Ä',
  monitor: '–ú–æ–Ω–∏—Ç–æ—Ä',
  powerSupply: '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è',
  keyboard: '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
  mouse: '–ú—ã—à—å',
};

export default function PCBuilder() {
  const [components, setComponents] = useState([]);
  const [compatibleBuilds, setCompatibleBuilds] = useState([]);
  const [incompatibleBuilds, setIncompatibleBuilds] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);

  const categories = Object.keys(categoryTranslations);

  useEffect(() => {
    const fetchComponents = async () => {
      try {
        const response = await fetch(API_URL);
        const data = await response.json();

        const normalized = data.map(comp => ({
          ...comp,
          category: comp.category.trim(),
          price: Number(comp.price) || 0,
          score: Number(comp.score) || 0,
          socket: comp.socket?.trim().toLowerCase() || '',
          power: Number(comp.power) || 0,
          formFactor: comp.formFactor?.trim().toLowerCase() || '',
          resolution: comp.resolution?.trim() || '',
          wattage: Number(comp.wattage) || 0,
          type: comp.type?.trim().toLowerCase() || '',
          version: comp.version?.trim() || '',
          frequency: Number(comp.frequency) || 0,
          cores: Number(comp.cores) || 0,
          memory: Number(comp.memory) || 0,
          ramType: comp.ramType?.trim().toLowerCase() || '',
          capacity: Number(comp.capacity) || 0,
          interface: comp.interface?.trim().toLowerCase() || '',
          supportedFormFactors: comp.supportedFormFactors?.toLowerCase() || '',
          supportedInterfaces: comp.supportedInterfaces?.toLowerCase() || '',
          pcieVersion: comp.pcieVersion?.toLowerCase() || '',
        }));

        setComponents(normalized);
        generateBuilds(normalized);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.');
      } finally {
        setLoading(false);
      }
    };

    fetchComponents();
  }, []);
  const groupByCategory = (items) => {
    return categories.reduce((acc, cat) => {
      acc[cat] = items.filter(item => item.category === cat);
      return acc;
    }, {});
  };

  const generateBuilds = (components) => {
    const grouped = groupByCategory(components);
    const compatible = [];
    const incompatible = [];

    for (const cpu of grouped.processor) {
      const motherboards = grouped.motherboard.filter(mb => mb.socket === cpu.socket);
      for (const mb of motherboards) {
        const ramList = grouped.ram.filter(r => r.ramType === mb.ramType);
        const storageList = grouped.storage.filter(s => mb.supportedInterfaces.includes(s.interface));
        const gpuList = grouped.graphicsCard.filter(gpu => mb.pcieVersion.includes(gpu.pcieVersion));
        const coolerList = grouped.cooler.filter(cooler => cooler.socket.split(',').map(s => s.trim().toLowerCase()).includes(cpu.socket));
        const caseList = grouped.case.filter(c => c.supportedFormFactors.includes(mb.formFactor));
        const totalPower = cpu.power;

        for (const ram of ramList) {
          for (const storage of storageList) {
            for (const gpu of gpuList) {
              const requiredPower = totalPower + gpu.power + 100;
              const psus = grouped.powerSupply.filter(psu => psu.wattage >= requiredPower);

              for (const psu of psus) {
                for (const pcCase of caseList) {
                  for (const cooler of coolerList) {
                    const build = {
                      processor: cpu,
                      motherboard: mb,
                      ram,
                      storage,
                      graphicsCard: gpu,
                      powerSupply: psu,
                      case: pcCase,
                      cooler,
                    };

                    const totalPrice = Object.values(build).reduce((sum, comp) => sum + comp.price, 0);
                    const result = { ...build, totalPrice };

                    // –°–æ–≤–º–µ—Å—Ç–∏–º–∞?
                    const issues = getCompatibilityIssues(build);
                    if (issues.length === 0) {
                      compatible.push(result);
                    } else {
                      incompatible.push({ ...result, issues });
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    setCompatibleBuilds(compatible);
    setIncompatibleBuilds(incompatible);
  };

  const getCompatibilityIssues = (build) => {
    const issues = [];

    if (build.processor.socket !== build.motherboard.socket) {
      issues.push('–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞ CPU –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç—ã');
    }
    if (build.motherboard.ramType !== build.ram.ramType) {
      issues.push('RAM –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç–æ–π');
    }
    if (!build.motherboard.supportedInterfaces.includes(build.storage.interface)) {
      issues.push('–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–ª–∞—Ç–æ–π');
    }
    if (!build.motherboard.pcieVersion.includes(build.graphicsCard.pcieVersion)) {
      issues.push('PCIe –≤–µ—Ä—Å–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç (–≤–∏–¥–µ–æ ‚Üî –ø–ª–∞—Ç–∞)');
    }
    if (!build.case.supportedFormFactors.includes(build.motherboard.formFactor)) {
      issues.push('–§–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä –ø–ª–∞—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä–ø—É—Å–æ–º');
    }
    const coolerSockets = build.cooler.socket.split(',').map(s => s.trim().toLowerCase());
    if (!coolerSockets.includes(build.processor.socket)) {
      issues.push('–ö—É–ª–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∫–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞');
    }
    const requiredPower = build.processor.power + (build.graphicsCard?.power || 0) + 100;
    if (build.powerSupply.wattage < requiredPower) {
      issues.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –±–ª–æ–∫–∞ –ø–∏—Ç–∞–Ω–∏—è');
    }

    return issues;
  };
  return (
    <div className="max-w-5xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6 text-center">üñ•Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å–±–æ—Ä–∫–∏ –ü–ö</h1>

      {loading && <p className="text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...</p>}
      {error && <p className="text-center text-red-600">{error}</p>}

      {!loading && compatibleBuilds.length === 0 && incompatibleBuilds.length === 0 && (
        <p className="text-center text-gray-600">–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</p>
      )}

      {compatibleBuilds.length > 0 && (
        <>
          <h2 className="text-2xl font-semibold mb-4 text-green-700">‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å–±–æ—Ä–∫–∏:</h2>
          {compatibleBuilds.map((build, i) => (
            <div key={i} className="mb-8 p-4 border border-green-300 rounded-lg bg-green-50">
              <h3 className="text-xl font-bold text-green-800 mb-3">–°–±–æ—Ä–∫–∞ #{i + 1}</h3>
              <ul className="space-y-1 text-gray-800 text-sm">
                {Object.entries(build).map(([cat, comp]) => {
                  if (cat === 'totalPrice') return null;
                  return (
                    <li key={cat}>
                      <strong>{categoryTranslations[cat] || cat}:</strong> {comp.name} ‚Äî {comp.price.toLocaleString()} ‚Ç∏
                    </li>
                  );
                })}
              </ul>
              <p className="mt-3 font-bold text-green-900">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {build.totalPrice.toLocaleString()} ‚Ç∏</p>
            </div>
          ))}
        </>
      )}

      {incompatibleBuilds.length > 0 && (
        <>
          <h2 className="text-2xl font-semibold mb-4 text-red-700">‚ùå –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å–±–æ—Ä–∫–∏ (—Å –ø—Ä–∏—á–∏–Ω–∞–º–∏):</h2>
          {incompatibleBuilds.map((build, i) => (
            <div key={i} className="mb-8 p-4 border border-red-300 rounded-lg bg-red-50">
              <h3 className="text-xl font-bold text-red-800 mb-2">–°–±–æ—Ä–∫–∞ #{i + 1}</h3>
              <ul className="space-y-1 text-gray-800 text-sm">
                {Object.entries(build).map(([cat, comp]) => {
                  if (cat === 'totalPrice' || cat === 'issues') return null;
                  return (
                    <li key={cat}>
                      <strong>{categoryTranslations[cat] || cat}:</strong> {comp.name} ‚Äî {comp.price.toLocaleString()} ‚Ç∏
                    </li>
                  );
                })}
              </ul>
              <p className="mt-2 font-semibold text-red-900">–ü—Ä–∏—á–∏–Ω—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:</p>
              <ul className="list-disc list-inside text-red-800 text-sm">
                {build.issues.map((issue, idx) => (
                  <li key={idx}>{issue}</li>
                ))}
              </ul>
              <p className="mt-3 font-bold text-red-900">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {build.totalPrice.toLocaleString()} ‚Ç∏</p>
            </div>
          ))}
        </>
      )}
    </div>
  );
}
